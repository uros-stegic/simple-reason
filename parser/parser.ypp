%{
#include <cstdlib>
#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <formulae.hpp>
#include <transformations.hpp>

#define YYERROR_VERBOSE 1

extern int yylex();
extern bool interactive;

std::map<std::string, art::Formula*> sym_table;

void yyerror(const std::string& message)
{
	std::cerr << "[ERROR]: " << message << std::endl << std::endl;
}

%}

%union {
	std::string* string;
	art::Formula* formula;
	art::Term* term;
	std::vector<art::Term>* term_list;
}

%token<string> VAR_TOKEN FUN_TOKEN PRED_TOKEN CONST_TOKEN IDENT
%token EQUIV_TOKEN IMPL_TOKEN DISJ_TOKEN CONJ_TOKEN NEG_TOKEN LOG_CONST_T LOG_CONST_F
%token EQUALS_TOKEN NOT_EQUALS_TOKEN
%token EXIT_TOKEN END_OF_EXPRESSION
%token ASSIGN_TOKEN

%left DELETE_TOKEN
%left NNF_TOKEN CNF_TOKEN C_DISTR_TOKEN D_DISTR_TOKEN N_DISTR_TOKEN SIMPLIFY_TOKEN NO_IMPS_TOKEN QUANT_UP PRENEX_TOKEN
%left UNIV_TOKEN EXIST_TOKEN '.'
%left EQUIV_TOKEN
%left IMPL_TOKEN
%left DISJ_TOKEN
%left CONJ_TOKEN
%left NEG_TOKEN
%nonassoc LOG_CONST_T LOG_CONST_F
%nonassoc PRED_TOKEN FUN_TOKEN EQUALS_TOKEN NOT_EQUALS_TOKEN
%nonassoc VAR_TOKEN CONST_TOKEN


%type<formula> Formula Atomic Predicate UninterpretedPredicate InterpretedPredicate LogicalConstants
%type<term> Term Variable Function Constant
%type<term_list> Terms TermList
%%
Program		: Commands
			;

Commands	: Command END_OF_EXPRESSION Commands
		 	| 										{ std::cout << std::endl << "Quiting" << std::endl; std::exit(EXIT_SUCCESS); }
			;

Command		: Formula								{ std::cout << *$1 << std::endl; if( interactive ) return 0; }
		 	| IDENT ASSIGN_TOKEN Formula			{
					auto fnd = sym_table.find(*$1);
					if( fnd != sym_table.end() ) {
						delete fnd->second;
						fnd->second = $3;
					}
					else {
						sym_table[*$1] = $3;
					}

					delete $1;
					if( interactive ) {
						return 0;
					}
				}
		 	| EXIT_TOKEN							{ std::cout << "Quiting" << std::endl; std::exit(EXIT_SUCCESS); }
			| END_OF_EXPRESSION						{ if( interactive ) return 0; }
			| DELETE_TOKEN IDENT					{
					auto var = sym_table.find(*$2);
					if( var != sym_table.end() ) {
						delete var->second;
						sym_table.erase(var);
					}
					else {
						std::cerr << "[WARNING] Meta variable '" << *$2 << "' not found" << std::endl;
					}
					delete $2;
					if( interactive ) return 0;
				}
		 	| error 								{ return 1; }
			;

Formula		: Formula EQUIV_TOKEN Formula			{ $$ = new art::Formula(std::make_shared<art::Iff>(*$1, *$3)); delete $1; delete $3; }
			| Formula IMPL_TOKEN Formula			{ $$ = new art::Formula(std::make_shared<art::If>(*$1, *$3)); delete $1; delete $3; }
			| Formula DISJ_TOKEN Formula			{ $$ = new art::Formula(std::make_shared<art::Or>(*$1, *$3)); delete $1; delete $3; }
			| Formula CONJ_TOKEN Formula			{ $$ = new art::Formula(std::make_shared<art::And>(*$1, *$3)); delete $1; delete $3; }
			| NEG_TOKEN Formula						{ $$ = new art::Formula(std::make_shared<art::Not>(*$2)); delete $2; }
			| UNIV_TOKEN  Variable '.' Formula		{ $$ = new art::Formula(std::make_shared<art::ForAll>(*$4, *$2)); delete $2; delete $4; }
			| EXIST_TOKEN Variable '.' Formula		{ $$ = new art::Formula(std::make_shared<art::Exists>(*$4, *$2)); delete $2; delete $4; }
			| '(' Formula ')'						{ $$ = $2; }
			| Atomic								{ $$ = $1; }
			| IDENT	{
					auto sym = sym_table.find(*$1);
					if( sym == sym_table.end() ) {
						std::cerr << "undefined meta variable '" << *$1 << "'" << std::endl;
						std::exit(EXIT_FAILURE);
					}
					delete $1;
					//$$ = sym->second;
					$$ = new art::Formula((*sym->second)->copy());
				}
			| CNF_TOKEN Formula	{
					art::Transformation *p = new art::NaiveCNF();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| NNF_TOKEN Formula	{
					art::Transformation *p = new art::NNF();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| C_DISTR_TOKEN Formula	{
					art::Transformation *p = new art::ConjunctionDistribution();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| D_DISTR_TOKEN Formula	{
					art::Transformation *p = new art::DisjunctionDistribution();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| N_DISTR_TOKEN Formula	{
					art::Transformation *p = new art::NegationDistribution();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| NO_IMPS_TOKEN Formula	{
					art::Transformation *p = new art::EquivalenceElimination();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| SIMPLIFY_TOKEN Formula {
					art::Transformation *p = new art::Simplification();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| QUANT_UP Formula {
					art::Transformation *p = new art::QuantifierExtraction();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			| PRENEX_TOKEN Formula {
					art::Transformation *p = new art::Prenex();
					$$ = new art::Formula((*$2)->transform(*p));
					delete p;
					delete $2;
				}
			;

Atomic		: Predicate								{ $$ = $1; }
			| LogicalConstants						{ $$ = $1; }
			;

Predicate	: UninterpretedPredicate				{ $$ = $1; }
		  	| InterpretedPredicate					{ $$ = $1; }
			;

UninterpretedPredicate	: PRED_TOKEN Terms
					 		{
								$$ = new art::Formula(std::make_shared<art::Predicate>(*$2,*$1));
								delete $1;
					 			delete $2;
							}
		  				;

InterpretedPredicate	: Term EQUALS_TOKEN Term	
					 		{
								$$ = new art::Formula(std::make_shared<art::Equals>(
														art::Term (*$1), 
														art::Term (*$3)
													)
												);
								delete $1;
					 			delete $3;
							}
	
					 	| Term NOT_EQUALS_TOKEN Term	{}
					 		{
								$$ = new art::Formula(std::make_shared<art::Predicate>(
														std::vector<art::Term>{*$1, *$3},
														std::string("=/=")
													)
												);
								delete $1;
					 			delete $3;
							}
						;

LogicalConstants		: LOG_CONST_T		{ $$ = new art::Formula(std::make_shared<art::True>());	}
				  		| LOG_CONST_F		{ $$ = new art::Formula(std::make_shared<art::False>());	}
						;

Terms					: '(' TermList ')'	{ $$ = $2;						}
	   					| '(' ')'			{ $$ = new std::vector<art::Term>;	}
						;

TermList	: TermList ',' Term	{ $$ = $1; $$->push_back(*$3); delete $3;		}
		 	| Term				{ $$ = new std::vector<art::Term>{*$1}; delete $1;	}
			;

Term		: Variable			{ $$ = $1; }
	  		| Constant			{ $$ = $1; }
			| Function			{ $$ = $1; }
			;

Variable	: VAR_TOKEN			{ $$ = new art::Term(std::make_shared<art::Var>(*$1)); delete $1; }
		 	;

Constant	: CONST_TOKEN		{ $$ = new art::Term(std::make_shared<art::Constant>(*$1)); delete $1; }
		 	;

Function	: FUN_TOKEN Terms	{ $$ = new art::Term(std::make_shared<art::Function>(*$1, *$2)); delete $1; delete $2; }
		 	;

%%

